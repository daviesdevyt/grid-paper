String webpage = "<!DOCTYPE html>"
"<html lang='en'>"
"  <head>"
"    <meta charset='UTF-8' />"
"    <meta name='viewport' content='width=device-width, initial-scale=1.0' />"
"    <title>Path Drawing on Grid</title>"
"    <style>"
"      canvas {"
"        border: 1px solid black;"
"        touch-action: none; /* Prevents default scrolling */"
"      }"
"    </style>"
"  </head>"
"  <body>"
"    <canvas id='gridCanvas'></canvas>"
"    <script>"
"      const canvas = document.getElementById('gridCanvas');"
"      const ctx = canvas.getContext('2d');"
"      const gridCount = 60;"
"      const cellSize = 40;"
"      canvas.width = gridCount * cellSize;"
"      canvas.height = gridCount * cellSize;"
""
"      const pathNodes = [];"
"      let lastNode = null;"
"      let clearTimeoutId;"
""
"      function drawGrid() {"
"        ctx.clearRect(0, 0, canvas.width, canvas.height);"
"        for (let x = 0; x < canvas.width; x += cellSize) {"
"          for (let y = 0; y < canvas.height; y += cellSize) {"
"            ctx.strokeRect(x, y, cellSize, cellSize);"
"          }"
"        }"
"      }"
""
"      function getGridPosition(x, y) {"
"        const gridX = Math.floor(x / cellSize);"
"        const gridY = Math.floor(y / cellSize);"
"        return { gridX, gridY };"
"      }"
""
"      function isInPath(gridX, gridY) {"
"        return pathNodes.some((node) => node.gridX === gridX && node.gridY === gridY);"
"      }"
""
"      function isValidMove(current, next) {"
"        if (!current) return true;"
"        const dx = Math.abs(current.gridX - next.gridX);"
"        const dy = Math.abs(current.gridY - next.gridY);"
"        return (dx === 1 && dy === 0) || (dx === 0 && dy === 1);"
"      }"
""
"      function handleDraw(event) {"
"        const rect = canvas.getBoundingClientRect();"
"        const x = (event.touches ? event.touches[0].clientX : event.clientX) - rect.left;"
"        const y = (event.touches ? event.touches[0].clientY : event.clientY) - rect.top;"
""
"        const { gridX, gridY } = getGridPosition(x, y);"
"        const nextNode = { gridX, gridY };"
""
"        if (!isInPath(gridX, gridY) && isValidMove(lastNode, nextNode)) {"
"          pathNodes.push(nextNode);"
"          lastNode = nextNode;"
"          ctx.fillStyle = 'blue';"
"          ctx.fillRect(gridX * cellSize, gridY * cellSize, cellSize, cellSize);"
"        }"
""
"       "
"        clearTimeout(clearTimeoutId);"
"      }"
"      function isEqualArray(arr1, arr2) {"
"        return ("
"          arr1.length === arr2.length && arr1.every((subArr, i) => subArr.length === arr2[i].length && subArr.every((val, j) => val === arr2[i][j]))"
"        );"
"      }"
""
"      function finishDrawing() {"
"        const interpolatedNodes = [];"
""
"        var lNode = pathNodes[0];"
"        pathNodes.forEach((node) => {"
"          interpolatedNodes.push({ x: node.gridX - lNode.gridX, y: lNode.gridY - node.gridY });"
"          lNode = node;"
"        });"
""
"        var dirs = [];"
"        const right = ["
"          ["
"            [0, 1],"
"            [1, 0],"
"          ],"
"          ["
"            [1, 0],"
"            [0, -1],"
"          ],"
"          ["
"            [0, -1],"
"            [-1, 0],"
"          ],"
""
"          ["
"            [-1, 0],"
"            [0, 1],"
"          ],"
"        ];"
"        const left = ["
"          ["
"            [0, -1],"
"            [1, 0],"
"          ],"
"          ["
"            [1, 0],"
"            [0, 1],"
"          ],"
"          ["
"            [-1, 0],"
"            [0, -1],"
"          ],"
"          ["
"            [0, 1],"
"            [-1, 0],"
"          ],"
"        ];"
"        var lInterNode = [0, 0];"
""
"        for (let i = 0; i < interpolatedNodes.length; i++) {"
"          const lastTwo = [Object.values(lInterNode || interpolatedNodes[i - 1]), Object.values(interpolatedNodes[i])];"
"          lInterNode = null;"
""
"          if (right.some((pattern) => isEqualArray(pattern, lastTwo))) {"
"            dirs.push('right');"
"          } else if (left.some((pattern) => isEqualArray(pattern, lastTwo))) {"
"            dirs.push('left');"
"          } else {"
"            dirs.push('straight');"
"          }"
"        }"
""
"        console.log('Dirs:', dirs);"
"        sendPathInfo(dirs);"
"        clearTimeoutId = setTimeout(() => {"
"          pathNodes.length = 0;"
"          lastNode = null;"
"          drawGrid();"
"        }, 3000);"
"      }"
""
"      canvas.addEventListener('touchmove', handleDraw);"
"      canvas.addEventListener('mousemove', (e) => {"
"        if (e.buttons === 1) handleDraw(e);"
"      });"
""
"      canvas.addEventListener('touchend', finishDrawing);"
"      canvas.addEventListener('mouseup', finishDrawing);"
""
"      drawGrid();"
""
"      function sendPathInfo(dirs) {"
"        fetch('/path', {"
"          method: 'POST',"
"          body: dirs.join(','),"
"        })"
"          .then((response) => response.json())"
"          .then((data) => {"
"            console.log('Success:', data);"
"          })"
"          .catch((error) => {"
"            console.error('Error:', error);"
"          });"
"      }"
"    </script>"
"  </body>"
"</html>";
